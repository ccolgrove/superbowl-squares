{"version":3,"sources":["helpers/arrays.ts","components/Square.tsx","components/Grid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createArray","length","Array","BigSquare","styled","div","smTop","smBottom","smLeft","smRight","top","bottom","left","right","LabelDiv","Square","React","memo","row","column","totalRows","totalColumns","SquareGroup","StyledCol","Col","StyledColLeft","Grid","rows","columns","halfCols","Container","map","_el","idxRow","Row","className","idxCol","AppDiv","Title","h1","HeaderContainer","App","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAAO,SAASA,EAAYC,GAC1B,OAAO,YAAI,IAAIC,MAAMD,I,2BCEjBE,EAAYC,IAAOC,IAAV,+PAgBT,qBAAGC,MAAoB,+BAAgC,MACvD,qBAAGC,SAA0B,kCAAmC,MAChE,qBAAGC,OAAsB,gCAAiC,MAC1D,qBAAGC,QAAwB,iCAAkC,MAI7D,qBAAGC,IAAgB,+BAAgC,MACnD,qBAAGC,OAAsB,kCAAmC,MAC5D,qBAAGC,KAAkB,gCAAiC,MACtD,qBAAGC,MAAoB,iCAAkC,MAIzDC,EAAWV,IAAOC,IAAV,2FAaDU,EAA2CC,IAAMC,MAC5D,YAKI,IAJFC,EAIC,EAJDA,IACAC,EAGC,EAHDA,OACAC,EAEC,EAFDA,UACAC,EACC,EADDA,aAEMX,EAAc,IAARQ,EACNP,EAASO,IAAQE,EAAY,EAC7BR,EAAkB,IAAXO,EACPN,EAAQM,IAAWE,EAAe,EAElCf,EAAgB,IAARY,GAAaC,EAASE,EAAe,EAC7Cd,EAAWW,IAAQE,EAAY,GAAKD,GAAUE,EAAe,EAC7Db,EAAoB,IAAXW,GAAgBA,IAAWE,EAAe,EACnDZ,EAAUU,IAAWE,EAAe,EAAI,GAAKF,IAAWE,EAAe,EAE7E,OAAO,cAAClB,EAAD,CACLO,IAAKA,EACLC,OAAQA,EACRC,KAAMA,EACNC,MAAOA,EACPP,MAAOA,EACPC,SAAUA,EACVC,OAAQA,EACRC,QAASA,EARJ,SAUL,eAACK,EAAD,WACGI,EAAKC,UChERG,EAAclB,IAAOC,IAAV,8CAIXkB,EAAYnB,YAAOoB,IAAPpB,CAAH,gHAOTqB,EAAgBrB,YAAOmB,EAAPnB,CAAH,gGAUNsB,EAAuCV,QAAW,YAAkC,IAAlBW,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAC7EC,EAAWD,EAAU,EAE3B,OAAO,cAACE,EAAA,EAAD,UACJ9B,EAAY2B,GAAMI,KAAI,SAACC,EAAKC,GAAN,OACrB,eAACC,EAAA,EAAD,CAAKC,UAAU,OAAf,UACE,cAACV,EAAD,UACE,cAACH,EAAD,UAActB,EAAY6B,GAAUE,KAAI,SAACC,EAAKI,GAAN,OACpC,cAAC,EAAD,CAEElB,IAAKe,EACLd,OAAQiB,EACRf,aAAcO,EACdR,UAAWO,GAJNS,UASb,cAACb,EAAD,UACE,cAACD,EAAD,UAActB,EAAY6B,GAAUE,KAAI,SAACC,EAAKI,GAAN,OACpC,cAAC,EAAD,CAEElB,IAAKe,EACLd,OAAQiB,EAASP,EACjBR,aAAcO,EACdR,UAAWO,GAJNS,EAASP,YAhBGI,WC9B3BI,EAASjC,IAAOC,IAAV,iGAMNiC,EAAQlC,IAAOmC,GAAV,mEAKLC,EAAkBpC,YAAO0B,IAAP1B,CAAH,+IAmBNqC,MAXf,WACE,OACE,eAACJ,EAAD,WACE,cAACG,EAAD,CAAiBL,UAAU,YAAYO,OAAO,EAA9C,SACE,cAACJ,EAAD,CAAOH,UAAU,aAAjB,iCAEF,cAAC,EAAD,CAAMR,KAAM,GAAIC,QAAS,SCjBhBe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2324cb21.chunk.js","sourcesContent":["export function createArray(length: number): unknown[] {\n  return [...new Array(length)]\n}","import React from 'react';\nimport styled from \"styled-components\";\n\nconst BigSquare = styled.div<{ \n  top?: boolean, \n  bottom?: boolean, \n  left?: boolean, \n  right?: boolean,\n  smTop?: boolean,\n  smBottom?: boolean,\n  smLeft?: boolean,\n  smRight?: boolean\n}>`\n  width: 60px;\n  height: 60px;\n  border: 2px solid black;\n  display: flex;\n\n  @media (max-width: 768px) {\n    ${({ smTop }) => smTop ? \"border-top: 4px solid black;\": \"\"}\n    ${({ smBottom }) => smBottom ? \"border-bottom: 4px solid black;\": \"\"}\n    ${({ smLeft }) => smLeft ? \"border-left: 4px solid black;\": \"\"}\n    ${({ smRight }) => smRight ? \"border-right: 4px solid black;\": \"\"}\n  }\n\n  @media (min-width: 768px) {\n    ${({ top }) => top ? \"border-top: 4px solid black;\": \"\"}\n    ${({ bottom }) => bottom ? \"border-bottom: 4px solid black;\": \"\"}\n    ${({ left }) => left ? \"border-left: 4px solid black;\": \"\"}\n    ${({ right }) => right ? \"border-right: 4px solid black;\": \"\"}\n  }\n`;\n\nconst LabelDiv = styled.div`\n  margin-left: 3px;\n  font-size: 10px;\n  font-weight: bold;\n`;\n\nexport interface SquareProps {\n  row: number;\n  column: number;\n  totalRows: number;\n  totalColumns: number;\n}\n\nexport const Square: React.ComponentType<SquareProps> = React.memo(\n  function Square({ \n    row, \n    column,\n    totalRows,\n    totalColumns,\n  }) {\n    const top = row === 0;\n    const bottom = row === totalRows - 1;\n    const left = column === 0;\n    const right = column === totalColumns - 1;\n\n    const smTop = row === 0 && column < totalColumns / 2;\n    const smBottom = row === totalRows - 1 && column >= totalColumns / 2;\n    const smLeft = column === 0 || column === totalColumns / 2;\n    const smRight = column === totalColumns / 2 - 1 || column === totalColumns - 1;\n\n    return <BigSquare \n      top={top} \n      bottom={bottom} \n      left={left} \n      right={right}\n      smTop={smTop} \n      smBottom={smBottom} \n      smLeft={smLeft} \n      smRight={smRight}\n    >\n      <LabelDiv>\n        {row}{column}\n      </LabelDiv>\n    </BigSquare>;\n  }\n);","import * as React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport styled from \"styled-components\";\n\nimport { createArray } from \"../helpers/arrays\";\n\nimport { Square } from \"./Square\";\n\nconst SquareGroup = styled.div`\n  display: flex;\n`;\n\nconst StyledCol = styled(Col)`\n  display: flex;\n  @media (max-width: 768px) {\n    justify-content: center;\n  }\n`;\n\nconst StyledColLeft = styled(StyledCol)`\n  @media (min-width: 768px) {\n    justify-content: flex-end;\n  }\n`;\nexport interface GridProps {\n  rows: number;\n  columns: number;\n}\n\nexport const Grid: React.ComponentType<GridProps> = React.memo(function Grid({ rows, columns }) {\n  const halfCols = columns / 2;\n  \n  return <Container>\n    {createArray(rows).map((_el, idxRow) => (\n      <Row className=\"gx-0\" key={idxRow}>\n        <StyledColLeft>\n          <SquareGroup>{createArray(halfCols).map((_el, idxCol) => (\n              <Square \n                key={idxCol} \n                row={idxRow} \n                column={idxCol} \n                totalColumns={columns} \n                totalRows={rows}\n              />\n            ))}\n          </SquareGroup>\n        </StyledColLeft>\n        <StyledCol>\n          <SquareGroup>{createArray(halfCols).map((_el, idxCol) => (\n              <Square \n                key={idxCol + halfCols }\n                row={idxRow} \n                column={idxCol + halfCols} \n                totalColumns={columns} \n                totalRows={rows}\n              />\n            ))}\n          </SquareGroup>        \n        </StyledCol>\n      </Row>\n    ))}\n  </Container>;\n})","import React from 'react';\nimport Container from \"react-bootstrap/Container\"\nimport styled from \"styled-components\";\n\nimport { Grid } from './components/Grid';\n\nconst AppDiv = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Title = styled.h1`\n  display: flex;\n  margin-bottom: 0;\n`;  \n\nconst HeaderContainer = styled(Container)`\n  margin-bottom: 20px;\n  min-height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction App() {\n  return (\n    <AppDiv>\n      <HeaderContainer className=\"bg-danger\" fluid={true}>\n        <Title className=\"text-light\">Superbowl Squares</Title>\n      </HeaderContainer>\n      <Grid rows={10} columns={10} />\n    </AppDiv>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}